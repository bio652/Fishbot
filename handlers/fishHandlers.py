from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from data import data
from states import states
from parsers import fishparse
from kbs import keyboards
from . import someMethods
from templ import texttemplates
import re

fishrt = Router()

#one fish
@fishrt.callback_query(F.data == "onefishforecast")
async def oneFishForecast(callback: types.CallbackQuery, state: FSMContext):
    if data.checkUser(callback.from_user.id):
        await state.set_state(states.GetOneFish.fishname)
        await callback.message.edit_text("üé£–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å —Ä—ã–±—ã:")
    else:
        await callback.answer("‚ö†Ô∏è–û—à–∏–±–∫–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")
    
@fishrt.message(states.GetOneFish.fishname)
async def fishNameIn(message: types.Message, state: FSMContext):
    if re.fullmatch(r'[–ê-–Ø–∞-—è–Å—ë,\\ -]+', message.text):
        fishname = await fishparse.oneFishCheck(data.getLink(message.from_user.id), message.text.lower(), message.from_user.id)
        if fishname:
            await state.update_data(fishname = fishname)
            await state.set_state(states.GetOneFish.day)
            await message.answer(f"üêü–í–∞—à–∞ —Ä—ã–±–∞: {fishname}\nüïî–í –∫–∞–∫–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç–µ –ª–æ–≤–∏—Ç—å?", reply_markup=keyboards.onefishMarkup)
        else:
            await message.answer("–ü–æ—Ö–æ–∂–µ, —Ç—É—Ç –Ω–µ –≤–æ–¥–∏—Ç—Å—è —Ç–∞–∫–æ–π —Ä—ã–±—ã ‚Åâ")
    else:
        await message.answer("‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä—ã–±—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
        
@fishrt.callback_query(states.GetOneFish.day)
async def fishDayIn(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(day = int(callback.data))
    datafu = await state.get_data()
    await state.clear()
    
    link = data.getLink(callback.from_user.id)
    if link == False:
        callback.answer('‚ö†Ô∏è–û—à–∏–±–∫–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start')
        return
    result = await fishparse.oneFishParser(link, datafu, callback.from_user.id)
    DAYFORMES = ['—Å–µ–≥–æ–¥–Ω—è','–∑–∞–≤—Ç—Ä–∞','–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞','—á–µ—Ä–µ–∑ 2 –¥–Ω—è','—á–µ—Ä–µ–∑ 3 –¥–Ω—è']
    
    if result:
        await callback.answer('')
        await callback.message.edit_text(f'üé£–®–∞–Ω—Å—ã –∫–ª—ë–≤–∞ {datafu['fishname']} {DAYFORMES[datafu['day']]}:\n\nüåô–ù–æ—á—å—é: {result[0][0]}% - {result[1][0]}\nüåÖ–£—Ç—Ä–æ–º: {result[0][1]}% - {result[1][1]}\nüå§Ô∏è–î–Ω—ë–º: {result[0][2]}% - {result[1][2]}\nüåÜ–í–µ—á–µ—Ä–æ–º: {result[0][3]}% - {result[1][3]} \n\n{result[2]}',
                                      reply_markup=keyboards.backMarkup)
    else:
        await callback.answer('‚ö†Ô∏è–û—à–∏–±–∫–∞')
     
@fishrt.callback_query(F.data == 'fishback')
async def fishBack(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await someMethods.mainMenucb(callback)
  
#some fish  
@fishrt.callback_query(F.data == 'allfishforecast')
async def allFishForecast(callback: types.CallbackQuery, state: FSMContext):
    if data.checkUser(callback.from_user.id):
        link = data.getLink(callback.from_user.id)
        fishData = await fishparse.allFishParser(link, callback.from_user.id)
        fishlist = texttemplates.fishlist(fishData)
        await callback.message.edit_text(f"ü¶à–†—ã–±—ã —Å –ª—É—á—à–∏–º –∫–ª—ë–≤–æ–º —Å–µ–≥–æ–¥–Ω—è –≤ üìç{data.getCity(callback.from_user.id)}:\n{fishlist}\n\n üé£–°–º–æ–∂–µ—à—å –ø–æ–π–º–∞—Ç—å –≤—Å–µ—Ö?)",
                                        reply_markup=keyboards.backMarkup)
    else:
        await callback.answer("‚ö†Ô∏è–û—à–∏–±–∫–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")